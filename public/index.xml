<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stuff About Cloud</title>
    
    
    
    <link>https://stuffabout.cloud/</link>
    <description>Recent content on Stuff About Cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Aug 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://stuffabout.cloud/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WordPress on EC2</title>
      <link>https://stuffabout.cloud/posts/2022-08-11-wordpress-on-ec2/</link>
      <pubDate>Thu, 11 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://stuffabout.cloud/posts/2022-08-11-wordpress-on-ec2/</guid>
      <description>
        
          
          
          
        
        
        
          WordPress on EC2#I originally had this blog hosted on Azure with a borrowed MSDN subscription credit with the idea that I would eventually get around to document what I had learnt. Unfortunately the MSDN account I was using expired before I realised.
Silver lining is I get to do it all over again, this time in AWS, and im documenting it right away so I dont fall for the same mistake again
          
        
        </description>
    </item>
    
    <item>
      <title>Docker Compose – Media Stack</title>
      <link>https://stuffabout.cloud/posts/2022-08-01-docker-compose-media-stack/</link>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://stuffabout.cloud/posts/2022-08-01-docker-compose-media-stack/</guid>
      <description>
        
          
          
          
        
        
        
          I thought I would share my first attempt at a docker compose file. This file deploys the containers I need to download and manage my media files.
The first part of this script deploys NZBGet, Sonarr, Radarr, and Plex containers and links to volumes for configuration data and NAS storage will be found.
version: &amp;#34;3.4&amp;#34; services: nzbget: container_name: nzbget image: linuxserver/nzbget:latest restart: unless-stopped network_mode: host environment: - TZ=${TZ} # timezone, defined in .
          
        
        </description>
    </item>
    
    <item>
      <title>Cloud Resume Challenge – Part 2</title>
      <link>https://stuffabout.cloud/posts/2022-07-16-cloud-resume-challenge-part-2/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://stuffabout.cloud/posts/2022-07-16-cloud-resume-challenge-part-2/</guid>
      <description>
        
          
          
          
        
        
        
          I’ve tackled some steps of the challenge out of turn here for a bit as it made sense to me to work on the Database/Lambda/API before working on the Javascript that requires them.
Step 8: Database#For this step I really leaned into trying to deploy via CloudFormation first rather than deploying via the GUI.
Our Database will consist of a DynamoDB as per the recommendation on the Cloud Resume Challenge website.
          
        
        </description>
    </item>
    
    <item>
      <title>Cloud Resume Challenge – Part 3</title>
      <link>https://stuffabout.cloud/posts/2022-07-16-cloud-resume-challenge-part-3/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://stuffabout.cloud/posts/2022-07-16-cloud-resume-challenge-part-3/</guid>
      <description>
        
          
          
          
        
        
        
          Step 7: Javascript#We need to include Javascript to call upon our APIs we created earlier. This took me quite a bit of time as I was struggling to find a solution that worked for me, whether I did something wrong in the earlier parts or wasn’t quite understanding things correctly I’m not sure.
Below is my two Javascripts I created, the first one invokes out POST method, which increases the visitor count value on our DynamoDB
          
        
        </description>
    </item>
    
    <item>
      <title>AWS Vault</title>
      <link>https://stuffabout.cloud/posts/2022-07-14-aws-vault/</link>
      <pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://stuffabout.cloud/posts/2022-07-14-aws-vault/</guid>
      <description>
        
          
          
          
        
        
        
          Let me tell you about a neat little tool I recently discovered to make AWS logins easier. Its called AWS Vault, its developed by a third party named 99Designs. The link to the GitHub repository is here.
AWS Vault allows you to store IAM credentials to your OS keystore and then generates temporary credentials from those to use for your chosen shell. I myself use Windows and Powershell.
Here is a run through on the install process I followed.
          
        
        </description>
    </item>
    
    <item>
      <title>Cloud Resume Challenge – Part 1</title>
      <link>https://stuffabout.cloud/posts/2022-07-14-cloud-resume-challenge-part-1/</link>
      <pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://stuffabout.cloud/posts/2022-07-14-cloud-resume-challenge-part-1/</guid>
      <description>
        
          
          
          
        
        
        
          I&amp;rsquo;m the kind of person who is never done with learning and trying to align my skillset with industry demand. I&amp;rsquo;ve done a lot of VMWare training and certification over the years and decided it was time to branch out to one of the popular public cloud offerings.
While researching Amazon Web Services courses and certifications I stumbled across the Cloud Resume Challenge. The challenge is a 16 step project designed to show off the skills typically required of a cloud engineer, specific to the flavour of cloud provider you are interested in (AWS, Azure, or Google).
          
        
        </description>
    </item>
    
    <item>
      <title>Automated password resetting for ESXi Hosts</title>
      <link>https://stuffabout.cloud/posts/2022-07-05-automated-password-resetting-for-esxi-hosts/</link>
      <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://stuffabout.cloud/posts/2022-07-05-automated-password-resetting-for-esxi-hosts/</guid>
      <description>
        
          
          
          
        
        
        
          A few months ago I was tasked with finding a solution for resetting root passwords for 800+ VMWare ESXi hosts on a regular schedule.
We had recently completed a project to move our credential store to Passwordstate and had noticed it had some functionality around automating resetting and validating credentials.
I initially started looking at the built-in Linux scripts which utilises SSH connections, something we have disabled for our ESXi hosts for security.
          
        
        </description>
    </item>
    
  </channel>
</rss>